ext {
    commonVersion = System.properties['commonVersion'] ?: '0-SNAPSHOT'

    cxfVersion = "3.1.3"
    commonsCollectionsVersion = "3.2.1"
    commonsIoVersion = "2.4"
    phSchematronVersion = "3.0.1"
    itextVersion = "5.3.2"
    springVersion = "4.2.2.RELEASE"

    webappOutputDir = 'build/'
    webappTestOutputDir = 'build/karma/'
}

allprojects {
    group = 'se.inera.intyg.intygstyper'
    version = System.properties['buildVersion'] ?: '0-SNAPSHOT'

    apply plugin: 'maven'
    apply plugin: 'org.ajoberstar.grgit'
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task createVersionPropertyFile(dependsOn: processResources) {
        def propertyFile = "${buildDir}/resources/main/version.properties"
        def projectVersion = rootProject.version
        def gitCommit = grgit.head().id
        def gitBranch = grgit.branch.getCurrent().getName()
        def buildNumber = System.env.BUILD_NUMBER

        inputs.property("project.version", projectVersion)
        inputs.property("gitCommit", gitCommit)
        inputs.property("gitBranch", gitBranch)
        inputs.property("buildNumber", buildNumber)
        outputs.file(propertyFile)

        doLast {
            ant.touch(file: propertyFile, mkdirs: "true")
            ant.propertyfile(file: propertyFile) {
                entry(key: 'project.version', default: projectVersion)
                entry(key: 'gitCommit', default: gitCommit)
                entry(key: 'gitBranch', default: gitBranch)
                entry(key: 'buildNumber', default: buildNumber)
            }
        }
    }

    jar.dependsOn(createVersionPropertyFile)

    task unzipBuildTools(type: Copy) {
        description 'Extracts common-build-tools'
        into "$buildDir/build-tools/"
        from {
            configurations.buildtools.collect { zipTree(it) }
        }
    }

    task packageTests(type: Jar) {
        from sourceSets.test.output
        classifier = 'tests'
    }
    artifacts.archives packageTests

    apply plugin: 'checkstyle'

    checkstyle {
        config = resources.text.fromFile("${buildDir}/build-tools/checkstyle/checkstyle.xml")
        ignoreFailures = false
        showViolations = true
    }

    checkstyleMain.onlyIf { project.hasProperty('codeQuality') }
    checkstyleMain.dependsOn unzipBuildTools
    checkstyleMain.source = "src/main/java"
    checkstyleTest.enabled = false

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.7.6.201602180812"
    }

    test {
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }

    uploadArchives {
        repositories.mavenDeployer {
            pom.whenConfigured { pom ->
                pom.dependencies.findAll { dep -> dep.groupId == 'se.inera.intyg.common' }.each {
                    it.version = findResolvedVersion(project, 'se.inera.intyg.common')
                }
            }
            repository(url: "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases") {
                authentication(userName: System.properties['nexusUsername'], password: System.properties['nexusPassword'])
            }
        }
    }

    install {
        repositories.mavenInstaller {
            pom.whenConfigured { pom ->
                pom.dependencies.findAll { dep -> dep.groupId == 'se.inera.intyg.common' }.each {
                    it.version = findResolvedVersion(project, 'se.inera.intyg.common')
                }
            }
        }
    }

    configurations {
        buildtools
    }

    dependencies {
        compile "se.inera.intyg.common:common-support:${commonVersion}"
        compile "se.inera.intyg.common:common-web:${commonVersion}"
        compile "se.inera.intyg.common:integration-util:${commonVersion}"
        compile "se.inera.intyg.common:common-schemas:${commonVersion}"
        compile "se.inera.intyg.common:common-services:${commonVersion}"

        compile "com.itextpdf:itextpdf:${itextVersion}"
        compile "commons-collections:commons-collections:${commonsCollectionsVersion}"
        compile "org.apache.cxf:cxf-rt-frontend-jaxrs:${cxfVersion}"
        compile "com.helger:ph-schematron:${phSchematronVersion}"
        compile "org.springframework:spring-tx:${springVersion}"

        buildtools "se.inera.intyg.common:common-build-tools:${commonVersion}"

        testCompile "junit:junit:4.+"
        testCompile 'commons-io:commons-io:2.4'
        testCompile 'org.mockito:mockito-core:1.9.0'
        testCompile 'org.skyscreamer:jsonassert:1.2.0'
        testCompile "org.springframework:spring-test:${springVersion}"
        testCompile 'org.unitils:unitils-core:3.3'
        testCompile 'xmlunit:xmlunit:1.4'
    }

    repositories {
        mavenLocal()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
        maven { url "http://repo.maven.apache.org/maven2" }
    }
}

String findResolvedVersion(Project project, String groupName) {
    String version
    project.configurations.find {
        it.name == 'compile'
    }.resolvedConfiguration.getFirstLevelModuleDependencies().find {
        if (it.moduleGroup == groupName) {
            version = it.moduleVersion
            return true
        }
        return false
    }
    return version
}

configure(subprojects.findAll {
        ['fk7263', 'ts-bas', 'ts-diabetes', 'lisu', 'luse', 'luae_fs', 'luae_na'].contains(it.name)
    }) {
    apply plugin: 'com.moowork.grunt'
    apply plugin: 'com.moowork.node'

    grunt {
        colors = System.properties['gruntColors'] ? System.properties['gruntColors'].toBoolean() : true
    }

    node {
        version = '6.6.0'
        download = true
        distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
        workDir = rootProject.projectDir
        nodeModulesDir = rootProject.projectDir
    }

    task jsInclude(type: NodeTask, dependsOn: [npmInstall, unzipBuildTools]) {
        inputs.dir("$projectDir/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        args = ['default', "--outputDir=${webappOutputDir}", "--npmDir=${rootProject.projectDir}"]
    }

    jar.dependsOn(jsInclude)

    jar {
        exclude '**/*.scss'
        exclude '**/*.spec.js'
        exclude '**/*.test.js'
        exclude '**/karma*.conf.js'
        exclude '**/karma*.conf.ci.js'
    }
}

configure(subprojects.findAll { ['fk7263', 'ts-bas', 'ts-diabetes'].contains(it.name) }) {
    task unzipWebjars(type: Copy) {
        description 'Copies common-web from the classpath and expands it so that we can use their static resources with karma'
        into "$buildDir/webjars/"
        from {
            configurations.jstests.collect { zipTree(it) }
        }
    }

    task jsTests(type: NodeTask, dependsOn: [npmInstall, unzipWebjars]) {
        inputs.dir("${projectDir}/src/main/resources")
        inputs.files(fileTree(projectDir).include('*.js'))
        inputs.files(fileTree(projectDir).include('*.json'))
        inputs.files(fileTree(rootProject.projectDir).include('package.json'))
        inputs.files(configurations.compile)
        outputs.dir(webappTestOutputDir)

        script = file("${rootProject.projectDir}/node_modules/grunt-cli/bin/grunt")
        doFirst {
            args = ['test',
                    "--outputDir=${webappTestOutputDir}",
                    '--skip-coverage=' + !gradle.taskGraph.allTasks.any { it.name == 'sonarcube' },
                    "--npmDir=${rootProject.projectDir}"]
        }
    }

    test.dependsOn(jsTests)

    configurations {
        jstests
    }

    dependencies {
        jstests "se.inera.intyg.common:common-web:${commonVersion}"

        compile "se.inera.intyg.common:common-support:${commonVersion}"
        compile "se.inera.intyg.common:integration-util:${commonVersion}"
        compile "se.inera.intyg.common:common-schemas:${commonVersion}"
        compile "se.inera.intyg.common:common-services:${commonVersion}"
    }
}

task tagRelease {
    description = 'Tags the current head with the projects version.'
    doLast {
        def grgit = org.ajoberstar.grgit.Grgit.open(creds: new org.ajoberstar.grgit.Credentials(System.properties['githubUser'], System.properties['githubPassword']))
        grgit.tag.add {
            name = "v" + version
            message = "Release of ${version}"
        }
        grgit.push(tags: true)
    }
}

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
        property "sonar.projectName", "Intygstyper"
        property "sonar.projectKey", "intygstyper"
        property "sonar.host.url", System.properties['sonarUrl'] ?: "https://build-inera.nordicmedtest.se/sonar"
        property "sonar.test.exclusions", "src/test/**"
        property "sonar.exclusions", [
            "**/stub/**",
            "**/exception/**",
            "**/*Exception*.java",
            "**/templates.js"
            ]
        property "sonar.javascript.lcov.reportPath", "build/karma/merged_lcov.info"
    }
}

buildscript {
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:0.12'
        classpath 'com.moowork.gradle:gradle-grunt-plugin:0.12'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1"
        classpath 'org.ajoberstar:gradle-git:1.5.1'
    }

    repositories {
        mavenLocal()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}
